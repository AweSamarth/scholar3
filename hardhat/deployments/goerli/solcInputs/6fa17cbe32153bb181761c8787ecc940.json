{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n  function getPrice(AggregatorV3Interface priceFeed)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n    // ETH/USD rate in 18 digit\r\n    return uint256(answer * 10000000000);\r\n  }\r\n\r\n  // 1000000000\r\n  // call it get fiatConversionRate, since it assumes something about decimals\r\n  // It wouldn't work for every aggregator\r\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 ethPrice = getPrice(priceFeed);\r\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n    return ethAmountInUsd;\r\n  }\r\n}"
    },
    "contracts/Research.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ncontract Research{\r\n\r\n    event ProfileCreated(address indexed theAddress, string theName);\r\n    event PaperUploaded(address indexed theAddress, string  paperCid);\r\n\r\n\r\n    struct Researcher{\r\n        string name;\r\n        uint256 joinDate;\r\n        string[] paperCidArray;\r\n\r\n    }\r\n\r\n    struct ResearchPaper{\r\n        address theAddress;\r\n        string title;\r\n        uint256 uploadDate;\r\n        string paperCid;\r\n    }\r\n\r\n    mapping  (address=>Researcher) profileMapping;\r\n    mapping  (string=>ResearchPaper) paperMapping;\r\n\r\n    function cidToPaper(string memory cid) public view returns(ResearchPaper memory){\r\n        return paperMapping[cid];\r\n        \r\n    }\r\n\r\n\r\n    function newResearcher(string memory theName) public{\r\n        profileMapping[msg.sender].name=theName;\r\n        profileMapping[msg.sender].joinDate= block.timestamp;\r\n        emit ProfileCreated(msg.sender, theName);\r\n    }\r\n    function viewResearcher(address theAddress) public view returns(Researcher memory){\r\n        return profileMapping[theAddress];\r\n    }\r\n\r\n\r\n    function addPaper(string memory _title, string memory cid) public{\r\n        ResearchPaper memory temp = ResearchPaper({title:_title, uploadDate:block.timestamp, paperCid:cid, theAddress:msg.sender });\r\n        profileMapping[msg.sender].paperCidArray.push(cid);\r\n        paperMapping[cid] = temp;\r\n        emit PaperUploaded(msg.sender, cid);\r\n\r\n    }\r\n\r\n    function viewOnesPapers(address theAddress) public view returns(string[] memory) {\r\n        return profileMapping[theAddress].paperCidArray;\r\n    }\r\n\r\n\r\n    function getTime() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}